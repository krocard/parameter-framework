# Use travis docker infrastructure
sudo: false
language: cpp

env:
    global:
        - PREFIX=$HOME/prefix

compiler:
    - gcc
    - clang

# Install a recent gcc and gcov,
# it will not be necessary once travis worker is based on ubuntu > 12.04.
# Install SWIG for bindings generation
# Install valgrind for memcheck tests
# Adding kubuntu-backports ppa for for cmake 2.8.12.
# it is needed in case of multiple python version on host
# Install python3-dev for the client simulator
addons:
    apt:
        # Travis white list of ppa
        # https://github.com/travis-ci/apt-source-whitelist/blob/master/ubuntu.json
        sources:
            - ubuntu-toolchain-r-test
            - kubuntu-backports
            - llvm-toolchain-precise
        # Travis white list of dpkg packages
        # https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise
        packages:
            - swig
            - valgrind
            - g++-4.8
            - cmake
            - python3-dev
            - libasio-dev
            - clang-format-3.8

install:
    - pip install --user cpp-coveralls; export PATH=$HOME/.local/bin:$PATH
    # This version of catch is known to work.
    - wget --directory-prefix $PREFIX/include
              https://raw.github.com/philsquared/Catch/v1.2.1/single_include/catch.hpp

before_script:
    - coverage=OFF
    # Force the manualy installed 4.8 version as it is not the default
    # Only enable coverage on gcc as clang segfault on coverage file write
    - if [ "$CC" = "gcc" ]; then
          export CC=gcc-4.8 CXX=g++-4.8;
          coverage=ON;
      fi

# how to build
script:
  # Check coding style
  - git ls-files | grep -E '\.[ch](pp)?$' |  xargs clang-format-3.8 -i &&
        git diff --exit-code || { git reset --hard; false; }

  - ( mkdir build_debug && cd build_debug &&
        cmake -DCMAKE_PREFIX_PATH=$PREFIX -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=${coverage} .. &&
        make -j &&
        CTEST_OUTPUT_ON_FAILURE=1 make ExperimentalTest ExperimentalMemCheck )
  - ( mkdir build && cd build &&
        cmake -DCMAKE_PREFIX_PATH=$PREFIX -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_BUILD_TYPE=Release .. &&
        make -j &&
        CTEST_OUTPUT_ON_FAILURE=1 make test &&
        make install &&
        cpack --verbose -G DEB && dpkg --info *.deb)
  - ( cd skeleton-subsystem &&
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../install . &&
        make &&
        CTEST_OUTPUT_ON_FAILURE=1 make ExperimentalTest ExperimentalMemCheck &&
        make install )
  - ( cd tools/clientSimulator &&
        echo "TODO - install the generated .deb instead of using ../install."
             "This would permit to test the packaging" &&
        cmake -DCMAKE_INSTALL_PREFIX=../install . &&
        make &&
        make install )

after_success:
    # Push coverage info on coveralls.io.
    # Ignore generated files, samples and tests
    - if [ "${coverage}" = "ON" ]; then
          coveralls --exclude "build_debug/bindings/python"
                    --exclude "build_debug/CMakeFiles"
                    --exclude "build"
                    --exclude "install"
                    --exclude "skeleton-subsystem"
                    --exclude "tools/clientSimulator"
                    --exclude "test/test-subsystem"
                    --exclude "test/functional-tests"
                    --exclude "bindings/c/Test.cpp"
                    --exclude "test/tokenizer"
                    --exclude "utility/test"
                    --gcov /usr/bin/gcov-4.8
                    --gcov-options '\--long-file-names --preserve-paths';
      fi

notifications:
  irc:
    - "chat.freenode.net#parameter-framework"
